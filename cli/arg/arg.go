package arg

import (
	"fmt"
	"slices"
	"strings"
)

// Returns the value of the given desiredArg and a slice with that arg removed
func Pop(args []string, desiredArg string) (string, []string) {
	arg, i, length := Find(args, desiredArg)
	if i < 0 {
		return "", args
	}
	return arg, append(args[:i], args[i+length:]...)
}

// Helper method for finding arguments by prefix within a list of arguments
func Find(args []string, desiredArg string) (value string, index int, length int) {
	exact := fmt.Sprintf("--%s", desiredArg)
	prefix := fmt.Sprintf("--%s=", desiredArg)
	for i, arg := range args {
		// Handle "--name", "value" form
		if arg == exact && i+1 < len(args) {
			return args[i+1], i, 2
		}
		// Handle "--name=value" form
		if strings.HasPrefix(arg, prefix) {
			return strings.TrimPrefix(arg, prefix), i, 1
		}
	}
	return "", -1, 0
}

// FindLast returns the value corresponding to the last occurrence of the given
// argument.
func FindLast(args []string, desiredArg string) (value string, index int, length int) {
	start := 0
	lastValue, lastIndex, lastLength := "", -1, 0
	for start < len(args) {
		value, index, length := Find(args[start:], desiredArg)
		if index == -1 {
			break
		}
		lastValue, lastIndex, lastLength = value, start+index, length
		start = start + index + length
	}
	return lastValue, lastIndex, lastLength
}

// Returns the first non-option found in the list of args (doesn't begin with "-")
func GetCommand(args []string) string {
	command, _ := GetCommandAndIndex(args)
	return command
}

// Returns the first non-option found in the list of args (doesn't begin with "-") and the index at which it was found
func GetCommandAndIndex(args []string) (string, int) {
	for i, arg := range args {
		if strings.HasPrefix(arg, "-") {
			continue
		}
		return arg, i
	}
	return "", -1
}

// Returns any arguments to be passed to the executable generated by bazel in
// args (those to the right of the first " -- ", if any)
// Ex. bb build //... <bazel_args> -- <executable_args>
func GetExecutableArgs(args []string) []string {
	for i, arg := range args {
		if arg == "--" {
			return append([]string{}, args[i+1:]...)
		}
	}
	return nil
}

// Returns any arugments to be passed to bazel in args (those to the left of the
// first " -- ", if any)
// Ex. bb remote build //... <bazel_args>
func GetBazelArgs(args []string) []string {
	splitIndex := len(args)
	for i, arg := range args {
		if arg == "--" {
			splitIndex = i
			break
		}
	}
	return append([]string{}, args[:splitIndex]...)
}

// Splits bazel args and executable args into two separate lists. The first
// "--" separator is dropped if it exists.
func SplitExecutableArgs(args []string) (bazel []string, exec []string) {
	return GetBazelArgs(args), GetExecutableArgs(args)
}

// JoinExecutableArgs joins the given args and executable args with a "--"
// separator, if the executable args are non-empty. Otherwise it returns
// the original bazel args.
func JoinExecutableArgs(args, execArgs []string) []string {
	out := append([]string{}, args...)
	if len(execArgs) == 0 {
		return out
	}
	if !slices.Contains(args, "--") {
		out = append(out, "--")
	}
	out = append(out, execArgs...)
	return out
}

// ContainsExact returns whether the slice `args` contains the literal string
// `value`.
func ContainsExact(args []string, value string) bool {
	for _, v := range args {
		if v == value {
			return true
		}
	}
	return false
}

